#version 430
#define TILE_SIZE 16
#define THREAD_COUNT 256 
layout(local_size_x = TILE_SIZE , local_size_y = TILE_SIZE, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer lay0 { float matA[]; }; // M X K
layout(std430, binding = 1) readonly buffer lay1 { float matB[]; }; // K X N
layout(std430, binding = 2) readonly buffer lay2 { uint dim[]; }; // M , K , N

layout(std430, binding = 3) buffer lay3 { float matOut[]; };

void main(){
    uint M = dim[0];
    uint K = dim[1];
    uint N = dim[2];
    uint offset = gl_WorkGroupID.y * TILE_SIZE + gl_LocalInvocationID.y;
    uint x = (gl_WorkGroupID.x * 256 + gl_LocalInvocationID.x)/N;
    uint y = (gl_WorkGroupID.x * 256 + gl_LocalInvocationID.x)%N;

    // uint x = gl_WorkGroupID.x * TILE_SIZE + gl_LocalInvocationID.x + (offset/N);
    // uint y = offset % N;

    if(x< M && y< N){
        float acc = 0.0;
        for(int i=0; i<K;i++){
            acc+= matA[x*K + i] * matB[i*N+ y];
        }
        matOut[x*N+y] = acc;
    }
}




