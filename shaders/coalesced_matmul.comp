#version 430
#define TILE_SIZE_X 64
#define TILE_SIZE_Y 8
#define THREAD_COUNT 512
layout(local_size_x = THREAD_COUNT , local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer lay0 { float matA[]; }; // M X K
layout(std430, binding = 1) readonly buffer lay1 { float matB[]; }; // K X N
layout(std430, binding = 2) readonly buffer lay2 { uint dim[]; }; // M , K , N

layout(std430, binding = 3) buffer lay3 { float matOut[]; };

void main(){
    uint M = dim[0];
    uint K = dim[1];
    uint N = dim[2];

    uint tilesAlongX = N/TILE_SIZE_Y;
    uint index = gl_WorkGroupID.x * tilesAlongX + gl_WorkGroupID.y;
   
    // uint x = (gl_WorkGroupID.x * THREAD_COUNT + gl_LocalInvocationID.x)/N;
    // uint y = (gl_WorkGroupID.x * THREAD_COUNT + gl_LocalInvocationID.x)%N;

    uint x = (index * THREAD_COUNT + gl_LocalInvocationID.x )/N;
    uint y = (index * THREAD_COUNT + gl_LocalInvocationID.x )%N;
    if(x< M && y< N){
        float acc = 0.0;
        for(int i=0; i<K;i++){
            acc+= matA[x*K + i] * matB[i*N+ y];
        }
        matOut[x*N+y] = acc;
    }
}




