#version 430

#define TILE_SIZE_X 64
#define TILE_SIZE_Y 8
layout(local_size_x = TILE_SIZE_X, local_size_y = TILE_SIZE_Y,
       local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer lay0 { float matA[]; };
layout(std430, binding = 1) readonly buffer lay1 { float matB[]; };
layout(std430, binding = 2) readonly buffer lay2 { uint dim[]; };

layout(std430, binding = 3) buffer lay3 { float matOut[]; };

shared float tileA[TILE_SIZE_X][TILE_SIZE_Y]; // 64 * 8 * 4B = 2KB
shared float tileB[TILE_SIZE_Y][TILE_SIZE_X]; // 8 * 64 * 4B = 2KB
shared float tileC[TILE_SIZE_X][TILE_SIZE_X]; // 64 * 64 * 4B = 16 KB ( Total 20
                                              // KB , SMEM Capacity 32 KB)

void main() {

  uvec3 workGroupId =
      gl_WorkGroupID; // This one is the id based on seq during vkCmdDispatch
  uvec3 localThreadId = gl_LocalInvocationID; // This one is basically thread id
                                              // based on local layout

  uint M = dim[0];
  uint K = dim[1];
  uint N = dim[2];

  uint blockCount = K / TILE_SIZE_Y;
  uint A_row_start = workGroupId.x * TILE_SIZE_X;
  uint B_col_start = workGroupId.y * TILE_SIZE_X;
  // Initialize the shared out block to 0

  uint x = ((localThreadId.x * TILE_SIZE_Y + localThreadId.y) * TILE_SIZE_Y) /
           TILE_SIZE_X;
  uint y = ((localThreadId.x * TILE_SIZE_Y + localThreadId.y) * TILE_SIZE_Y) %
           TILE_SIZE_X;

  for (int k = 0; k < TILE_SIZE_Y; k++) {
    tileC[x][y + k] = 0.0;
  }

  for (int blkIdx = 0; blkIdx < blockCount; ++blkIdx) {
    // Populate the tileA and TileB
    tileA[localThreadId.x][localThreadId.y] =
        matA[A_row_start * K + localThreadId.x * K + blkIdx * TILE_SIZE_Y +
             localThreadId.y];

    tileB[localThreadId.y][localThreadId.x] =
        matB[blkIdx * TILE_SIZE_Y * N + B_col_start + localThreadId.x * N +
             localThreadId.y];

    barrier();

    float res[TILE_SIZE_Y] =
        float[TILE_SIZE_Y](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    float cachedRowFromA[TILE_SIZE_Y];
    cachedRowFromA[0] = tileA[x][0];
    cachedRowFromA[1] = tileA[x][1];
    cachedRowFromA[2] = tileA[x][2];
    cachedRowFromA[3] = tileA[x][3];
    cachedRowFromA[4] = tileA[x][4];
    cachedRowFromA[5] = tileA[x][5];
    cachedRowFromA[6] = tileA[x][6];
    cachedRowFromA[7] = tileA[x][7];

    for(int idxA = 0; idxA < TILE_SIZE_Y ; idxA ++ ){
        // Write the inner loop
    }
  }
}