#version 430
#define THREAD_COUNT 512
#define BM 64
#define BK 8
#define BN 64
#define TM 8 // This should always be BM / BK
layout(local_size_x = THREAD_COUNT, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer lay0 { float matA[]; };
layout(std430, binding = 1) readonly buffer lay1 { float matB[]; };
layout(std430, binding = 2) readonly buffer lay2 { uint dim[]; };

layout(std430, binding = 3) buffer lay3 { float matOut[]; };

shared float tileA[BM][BK]; // 64 * 8 * 4B = 2KB
shared float tileB[BK][BN]; // 8 * 64 * 4B = 2KB
shared float tileC[BM][BN]; // 64 * 64 * 4B = 16 KB ( Total 20
                                              // KB , SMEM Capacity 32 KB)

void main() {

  uvec3 blockIdx =
      gl_WorkGroupID; // This one is the id based on seq during vkCmdDispatch
  uvec3 threadIdx = gl_LocalInvocationID; // This one is basically thread id
                                          // based on local layout

  uint M = dim[0];
  uint K = dim[1];
  uint N = dim[2];

  uint tRow = blockIdx.x;
  uint tCol = blockIdx.y;

  uint threadRow = threadIdx.x / BN;
  uint threadCol = threadIdx.x % BN;

  uint a = tRow * BM * K;
  uint b = tCol * BN;
  uint c = tRow * BM * N + tCol * BN;

  uint innerRowA = threadIdx.x / BK;
  uint innerColA = threadIdx.x % BK;

  uint innerRowB = threadIdx.x / BN;
  uint innerColB = threadIdx.x % BN;

  float partialRes[TM] =
      float[TM](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

  for(uint blkIdx = 0 ; blkIdx < K ; blkIdx += BK ){
    tileA[innerRowA][innerColA] = matA[a + innerRowA * K + innerColA ];
    tileB[innerRowB][innerColB] = matB[b + innerRowB * N + innerColB ];
    barrier();

    a += BK;
    b += BK * N ;

    for(uint dotIdx = 0 ; dotIdx < BK ; dotIdx++){
      float tmpB = tileB[dotIdx][threadCol]; // Whichever column of tileB u are in, you will be writing results in that corner. 

      for(uint resIdx = 0 ; resIdx<TM; resIdx++){
        partialRes[resIdx] += tileA[(threadRow * TM + resIdx)] [dotIdx] * tmpB;
      }
    }
    barrier();
  }

  for (uint resIdx = 0; resIdx < TM; resIdx++) {
    matOut[c + (threadRow * TM + resIdx) * N + threadCol] =
        partialRes[resIdx];
  }
}