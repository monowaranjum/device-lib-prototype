#version 430
#define TILE_SIZE 16
#define THREAD_COUNT 256
#define TILE_SIZE_X 16
#define TILE_SIZE_Y 16
layout(local_size_x = THREAD_COUNT, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer lay0 { float matA[]; };
layout(std430, binding = 1) readonly buffer lay1 { float matB[]; };
layout(std430, binding = 2) readonly buffer lay2 { uint dim[]; };

layout(std430, binding = 3) buffer lay3 { float matOut[]; };

shared float tileA[TILE_SIZE][TILE_SIZE];
shared float tileB[TILE_SIZE][TILE_SIZE];

void main() {

  uvec3 blockIdx = gl_WorkGroupID; // This one is the id based on vkCmdDispatch
  uvec3 threadIdx = gl_LocalInvocationID; // This one is basically thread id
                                          // based on local layout (32, 32, 1)

  uint M = dim[0];
  uint K = dim[1];
  uint N = dim[2];

  uint tRow = blockIdx.x;
  uint tCol = blockIdx.y;

  uint threadRow =  threadIdx.x / TILE_SIZE;
  uint threadCol =  threadIdx.x % TILE_SIZE;

  uint a = tRow * TILE_SIZE_X * K;
  uint b = tCol * TILE_SIZE_Y;
  uint c = tRow * TILE_SIZE_X * N + tCol * TILE_SIZE_Y;

  float tmp = 0.0;
  for (uint blkIdx = 0; blkIdx < K; blkIdx += TILE_SIZE_Y) {
    tileA[threadRow][threadCol] = matA[a + threadRow * K + threadCol];
    tileB[threadRow][threadCol] = matB[b + threadRow * N + threadCol];

    barrier();

    a += TILE_SIZE_Y;
    b += TILE_SIZE_X * N;

    for (uint k = 0; k < TILE_SIZE_Y; k++) {
      tmp += tileA[threadRow][k] * tileB[k][threadCol];
    }

    barrier();
  }

  matOut[c + threadRow * N + threadCol] = tmp;
}